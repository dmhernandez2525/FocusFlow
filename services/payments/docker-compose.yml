version: '3.8'

services:
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=3000
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://payment_user:payment_pass@postgres:5432/payment_service
      - DATABASE_MAX_CONNECTIONS=20
      - DATABASE_IDLE_TIMEOUT=30000
      - DATABASE_CONNECTION_TIMEOUT=60000
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - CORS_ORIGIN=["http://localhost:3000","http://localhost:3001"]
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_TIME_WINDOW=60000
      - API_PREFIX=/api/v1
      - ENABLE_SWAGGER=true
      - HEALTH_CHECK_INTERVAL=30000
      - PAYMENT_TIMEOUT=30000
      - IDEMPOTENCY_TTL=86400000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=payment_service
      - POSTGRES_USER=payment_user
      - POSTGRES_PASSWORD=payment_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user -d payment_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: [
      "postgres",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB"
    ]

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  payment-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local